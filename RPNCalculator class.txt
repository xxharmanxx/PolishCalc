public class RPNCalculator {
    private Stack stack;
    private int size;

    public RPNCalculator() {
        this.stack = new Stack();
        this.size = 0;
    }

    public int evaluateRPN(String rpnExpression, String delimiter) {
        String[] tokens = rpnExpression.split(delimiter);

        for (String token : tokens) {
            if (isOperator(token)) {
                if (size < 2) {
                    throw new IllegalArgumentException("Invalid RPN expression");
                }
                int operand2 = stack.pop();
                int operand1 = stack.pop();
                int result = performOperation(token, operand1, operand2);
                stack.push(result);
                size--;
            } else {
                try {
                    stack.push(Integer.parseInt(token));
                    size++;
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("Invalid token: " + token);
                }
            }
        }

        if (size != 1) {
            throw new IllegalArgumentException("Invalid RPN expression");
        }

        return stack.pop();
    }

    private boolean isOperator(String token) {
        return token.equals("+") || token.equals("-") || token.equals("*");
    }

    private int performOperation(String operator, int operand1, int operand2) {
        switch (operator) {
            case "+":
                return operand1 + operand2;
            case "-":
                return operand1 - operand2;
            case "*":
                return operand1 * operand2;
            default:
                throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }
}
